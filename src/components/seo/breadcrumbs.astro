---
export interface Props {
  items?: Array<{
    name: string;
    url?: string;
  }>;
}

const { items = [] } = Astro.props;

// 默认面包屑
const defaultItems = [
  { name: 'Home', url: '/' }
];

const breadcrumbItems = items.length > 0 ? items : defaultItems;

// 生成结构化数据
const structuredData = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": breadcrumbItems.map((item, index) => ({
    "@type": "ListItem",
    "position": index + 1,
    "name": item.name,
    "item": item.url ? new URL(item.url, Astro.site).toString() : undefined
  }))
};
---

<!-- 面包屑导航 - SEO优化 -->
<nav aria-label="Breadcrumb" class="breadcrumbs">
  <ol class="flex items-center space-x-2 text-sm text-gray-600">
    {breadcrumbItems.map((item, index) => (
      <li class="flex items-center">
        {index > 0 && (
          <svg class="w-3 h-3 mx-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
          </svg>
        )}
        {item.url ? (
          <a href={item.url} class="hover:text-gray-900 transition-colors">
            {item.name}
          </a>
        ) : (
          <span class="text-gray-900 font-medium">{item.name}</span>
        )}
      </li>
    ))}
  </ol>
</nav>

<!-- 结构化数据 -->
<script type="application/ld+json" set:html={JSON.stringify(structuredData)} />

<style>
  .breadcrumbs {
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
  }
</style>