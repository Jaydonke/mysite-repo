# AstroTemp - AI驱动的网站自动化生成系统

## 📋 目录
- [快速开始](#快速开始)
- [一键网站重置](#一键网站重置)
- [Reset-Site工作流程详解](#reset-site工作流程详解)
- [配置文件说明](#配置文件说明)
- [智能文章管理](#智能文章管理)
- [内链系统与SEO优化](#内链系统与SEO优化)
- [智能作者管理](#智能作者管理)
- [常用命令速查](#常用命令速查)
- [故障排除](#故障排除)

## 🚀 快速开始

### 环境要求
- Node.js 18+
- npm 或 yarn
- OpenAI API密钥（用于AI生成内容）
- Git

### 初始安装
```bash
# 克隆项目
git clone [your-repo-url]
cd astrotemp

# 安装依赖
npm install

# 配置环境变量
# 创建 .env 文件并添加：
# OPENAI_API_KEY=你的OpenAI密钥
# UNSPLASH_ACCESS_KEY=你的Unsplash密钥（可选）

# 启动开发服务器
npm run dev

# 构建生产版本
npm run build
```

## 🎯 一键网站重置

**最简单的方式：使用 reset-site 一键完成所有操作！**

```bash
# 方式1：使用npm命令
npm run reset-site

# 方式2：使用Node直接运行
node scripts/reset-site.js

# 方式3：使用批处理文件（Windows）
scripts\reset-site.bat
```

### 什么是 Reset-Site？

`reset-site` 是一个**完全自动化的网站重置和生成工具**，它会：

✅ 清空旧内容
✅ 使用AI生成全新的主题配置
✅ 自动生成40篇高质量文章（25篇立即发布 + 15篇定时发布）
✅ 自动生成网站图标
✅ 配置内链和SEO
✅ 完全准备好可以部署的网站

**一次运行，完整网站！无需手动干预。**

### 🎨 在运行前配置你的网站

编辑 [config.txt](config.txt) 文件（仅3行）：

```txt
theme: 你的主题名称（如：Travel & Adventure）
domain: 你的域名（如：example.com）
siteName: 网站名称（如：Example Blog）
```

**就这么简单！** reset-site 会自动使用这些信息生成完整的网站内容。

## 📋 Reset-Site工作流程详解

reset-site 按照以下13个步骤自动执行：

### 第1步：清空HTML文章 📄
```bash
npm run clear-html
```
清空 `newarticle/` 和 `scheduledarticle/` 文件夹中的HTML文件

### 第2步：删除所有现有文章 🗑️
```bash
npm run delete-all-articles
```
删除 `src/content/articles/` 中的所有文章和图片
自动创建备份到 `backups/` 目录

### 第3步：更新主题配置 🎨
```bash
npm run update-theme-fixed
```
**关键步骤：使用AI根据 config.txt 生成完整的网站配置**
- 读取主题、域名、网站名称
- 调用OpenAI API生成网站结构
- 更新 `config.template.js` 中的 `CURRENT_WEBSITE_CONTENT`
- 生成导航、页脚、社交媒体链接等

### 第4步：更新文章配置并重置追踪 📝
```bash
npm run update-articles-full
```
**生成40篇文章的配置列表**
- 根据主题和分类生成文章标题
- 自动分配到8个不同分类
- 确保文章分布均匀
- 重置位置追踪系统（避免重复内容）

### 第5步：生成文章内容 ✍️
```bash
npm run generate-articles
```
**使用OpenAI生成前25篇文章的HTML内容**
- 根据配置的标题生成完整文章
- 包含SEO优化的元数据
- 自动插入相关图片占位符
- 保存到 `newarticle/` 目录

### 第6步：同步配置到模板 ⚙️
```bash
npm run sync-config
```
将 `config.template.js` 的配置应用到 `src/config.js`

### 第7步：添加新文章到网站 📰
```bash
npm run add-articles-improved
```
**智能处理文章并添加到网站**
- HTML转MDX格式
- 下载并本地化图片
- 转换YouTube链接为嵌入组件
- 智能分配作者
- 生成SEO友好的slug

### 第8步：生成新主题方向 🎯
```bash
npm run generate-new-topics
```
**为未来内容生成新的主题方向**
- 分析已有内容
- 生成相关但不重复的主题
- 保存到 `config/new-topics.json`

### 第9步：生成15篇定时发布文章 📅
```bash
npm run generate-articles -- -s -k 25 -c 15
```
**生成后15篇文章用于定时发布**
- 跳过前25篇（-s -k 25）
- 生成15篇新文章（-c 15）
- 使用新主题方向
- 保存到 `scheduledarticle/` 目录

### 第10步：设置文章定时发布 ⏰
```bash
npm run schedule-articles
```
**将定时文章添加到网站并设置发布时间**
- 从今天+3天开始
- 每3天发布一篇
- 共15篇文章，覆盖45天

### 第11步：生成AI图标 🤖
```bash
npm run generate-ai-favicon
```
**使用DALL-E生成网站图标**
- 根据网站主题生成独特图标
- 保存为PNG格式

### 第12步：生成图标文件 🎨
```bash
npm run generate-favicon
```
**生成所有尺寸的favicon**
- favicon.ico
- apple-touch-icon.png
- 各种尺寸的PNG图标

### 第13步：更新网站图标 🔄
```bash
npm run update-favicon
```
将生成的图标复制到 `public/` 目录

---

**🎉 完成！你的网站现在拥有：**
- ✅ 完整的主题配置
- ✅ 40篇高质量AI生成的文章（25篇已发布 + 15篇定时发布）
- ✅ 所有图片本地化
- ✅ 自定义网站图标
- ✅ SEO优化的内链
- ✅ 准备好部署！

## ⚙️ 配置文件说明

### config.txt - 网站主配置
```txt
theme: Automotive & Mobility
domain: Vehivio.com
siteName: Vehivio
```

**这是唯一需要手动编辑的配置文件！**

### config.template.js - 完整网站配置模板
包含两个主要部分：

#### 1. CURRENT_WEBSITE_CONTENT（由AI自动生成）
```javascript
export const CURRENT_WEBSITE_CONTENT = {
  // 网站基本信息
  title: "网站标题",
  description: "网站描述",

  // 导航菜单
  navigation: { /* ... */ },

  // 页脚信息
  footer: { /* ... */ },

  // SEO配置
  seo: { /* ... */ },

  // 社交媒体
  social: { /* ... */ }
};
```

#### 2. ARTICLE_CONFIGS（由AI自动生成）
```javascript
export const ARTICLE_CONFIGS = [
  {
    title: "文章标题",
    category: "分类slug",
    keywords: ["关键词1", "关键词2"]
  },
  // ... 40篇文章配置
];
```

**⚠️ 不要手动编辑这些配置！** 它们由 `update-theme-fixed` 和 `update-articles-full` 自动生成。

### .env - 环境变量
```env
OPENAI_API_KEY=sk-...
UNSPLASH_ACCESS_KEY=...（可选）
```

## 🤖 智能文章管理

### 手动添加文章（不使用reset-site）

如果你想手动添加文章而不是使用完整的reset-site流程：

#### 1. 设置作者模式
```bash
# 随机作者模式（推荐）
echo "random" > author/name.txt

# 或固定作者模式
echo "laura-stevens" > author/name.txt
```

**智能随机作者特色：**
- ✅ 避免连续重复：不会连续选择同一作者
- ✅ 均匀分布：确保所有作者都得到合理分配
- ✅ 重置机制：每3个作者后重置记录，增加随机性

#### 2. 准备文章
将HTML文章放入 `newarticle/` 目录

#### 3. 添加文章到网站
```bash
npm run add-articles-improved
```

**功能包括：**
- ✅ HTML到MDX转换
- ✅ 图片自动下载和本地化
- ✅ YouTube链接转嵌入组件
- ✅ 智能分类和作者分配
- ✅ 时间管理和SEO优化

### AI文章生成（推荐使用reset-site）

通过OpenAI自动生成文章：

```bash
# 生成文章前先更新配置
npm run update-articles-full

# 生成前25篇文章
npm run generate-articles

# 生成指定数量的文章
npm run generate-articles -- -c 10

# 跳过前N篇，生成后续文章
npm run generate-articles -- -s -k 10 -c 5
```

### 定时发布系统

```bash
# 创建定时发布的文章
npm run schedule-articles

# 默认：每3天发布一篇，从今天+3天开始
```

#### 🔍 预览定时发布文章

**方法1：临时显示所有文章（推荐）**
```javascript
// 编辑 src/lib/handlers/articles.ts 第6行
// 将：
return data.isDraft !== true && new Date(data.publishedTime) < new Date();
// 改为：
return data.isDraft !== true;
```

**方法2：查看定时发布信息**
```bash
npm run preview-scheduled
```

### 批量作者管理

```bash
# 查看当前作者分布
node scripts/randomize-authors.js analyze

# 随机重新分配所有文章作者
node scripts/randomize-authors.js randomize
```

## 🔗 内链系统与SEO优化

AstroTemp 拥有先进的动态内链系统，自动为新文章生成SEO友好的内链。

### 内链系统特色

- 🤖 **自动关键词生成**：从文章标题和类别自动提取关键词
- 🎯 **智能映射算法**：动态建立关键词到文章的链接关系
- ⚡ **构建时处理**：在网站构建时自动添加内链，不影响运行时性能
- 📊 **质量过滤**：自动过滤常见停词和无意义关键词
- 💎 **优先级控制**：静态关键词具有更高优先级

### 内链管理命令

```bash
# 分析当前内链状况
npm run manage-links analyze

# 检查特定文章的内链机会
npm run manage-links check article-slug

# 为新文章推荐关键词
npm run manage-links suggest article-slug

# 生成详细的内链报告
npm run manage-links report
```

### 手动添加重要内链

编辑 `src/lib/rehype/internal-links.js` 中的静态映射：

```javascript
const staticKeywordMappings = {
  // 高价值关键词
  'travel tips': 'essential-travel-tips-guide',
  'budget travel': 'budget-friendly-destinations',
  'wellness retreats': 'top-wellness-retreats-guide',
  
  // 长尾关键词
  'travel on a budget': 'budget-travel-strategies',
  'solo travel safety': 'solo-travel-safety-guide',
  
  // 品牌关键词
  'travel planning': 'complete-travel-planning-guide'
};
```

### SEO最佳实践

- 🎯 每篇文章至少包含1-3个内链
- 🔗 使用描述性锚文本
- 📈 定期更新内链映射
- 🎨 保持内链的自然性

## 👥 智能作者管理

### 作者系统架构

AstroTemp 支持14位预配置作者，确保内容多样性：

```bash
# 查看所有可用作者
node scripts/randomize-authors.js analyze
```

**可用作者包括：**
- Alexandra Chen (AI Product Strategist)
- Benjamin Cole, Brian Mitchell, Daniel Foster
- Emily Roberts, Ethan Brooks, Gregory Shaw  
- Joshua Reynolds, Kevin Mitchell, Laura Stevens
- Mark Patterson, Megan Turner, Natalie Hayes
- Priya Sharma

### 作者分配策略

```bash
# 1. 智能随机模式（推荐）
echo "random" > author/name.txt

# 特色：
# ✅ 避免连续重复作者
# ✅ 均匀分布原则
# ✅ 每3个作者重置记录
# ✅ 智能候选者过滤

# 2. 固定作者模式
echo "laura-stevens" > author/name.txt
```

### 批量作者操作

```bash
# 重新随机分配所有文章作者
node scripts/randomize-authors.js randomize

# 查看当前作者分布统计
node scripts/randomize-authors.js analyze

# 结果示例：
# ✅ 25篇文章成功重新分配
# ✅ 最均匀分布：每位作者1-4篇文章
# ✅ 零连续重复
```

## ⚙️ 配置管理与同步

### 配置文件架构

| 文件 | 用途 | 说明 |
|------|------|------|
| `config.template.js` | 配置模板 | 包含网站的所有可配置项 |
| `src/config.js` | 实际配置 | 网站实际使用的配置文件 |
| `scripts/sync-config-template.js` | 同步脚本 | 模板应用到配置的自动化脚本 |

### 配置管理流程

```bash
# 1. 编辑配置模板
# 修改 config.template.js 中的网站信息

# 2. 同步配置到网站
npm run sync

# 3. 验证配置效果
npm run dev
```

### 配置模板示例

```javascript
// config.template.js
export const TEMPLATE_CONFIG = {
  // 网站基本信息
  siteName: "Travel Explorer",
  siteDescription: "Discover amazing destinations",
  siteUrl: "https://travelexplorer.com",
  
  // 品牌信息
  brand: {
    name: "Travel Explorer",
    tagline: "Your Journey Starts Here",
    logo: "/brand-logo.png"
  },
  
  // SEO优化
  seo: {
    defaultTitle: "Travel Explorer - Discover the World",
    keywords: ["travel", "destinations", "adventure"],
    author: "Travel Explorer Team"
  },
  
  // 社交媒体
  social: {
    twitter: "https://twitter.com/travelexplorer",
    facebook: "https://facebook.com/travelexplorer",
    instagram: "https://instagram.com/travelexplorer"
  }
};
```

### 批量配置更新

```bash
# 应用配置模板（推荐）
npm run sync

# 手动同步（如果npm脚本不可用）
node scripts/sync-config-template.js

# 验证配置同步结果
diff config.template.js src/config.js
```

## 🛠️ 常用命令速查

### 🎯 一键完整流程
```bash
npm run reset-site              # 🌟 完整网站重置和生成（推荐）
```

### 🚀 核心开发命令
```bash
npm run dev                     # 启动开发服务器
npm run build                   # 构建生产版本
npm run preview                 # 预览构建结果
npm run clear-cache             # 清理构建缓存
```

### 📝 AI内容生成命令
```bash
# 主题和配置
npm run update-theme-fixed      # AI生成网站主题配置
npm run update-articles-full    # AI生成文章配置列表
npm run sync-config             # 同步配置到网站

# 文章生成
npm run generate-articles       # 生成文章（默认25篇）
npm run generate-articles -- -c 10    # 生成10篇文章
npm run generate-articles -- -s -k 10 -c 5  # 跳过前10篇，生成后5篇

# 主题方向
npm run generate-new-topics     # 生成新的内容主题方向
```

### 📰 文章管理命令
```bash
# 手动添加文章
npm run add-articles-improved   # 智能添加HTML文章到网站
npm run delete-all-articles     # 删除所有现有文章
npm run clear-html              # 清空HTML文章文件夹

# 定时发布
npm run schedule-articles       # 设置文章定时发布
npm run preview-scheduled       # 查看定时发布文章信息

# 作者管理
node scripts/randomize-authors.js analyze    # 分析作者分布
node scripts/randomize-authors.js randomize  # 随机分配作者
```

### 🎨 图标和资源
```bash
npm run generate-ai-favicon     # AI生成网站图标
npm run generate-favicon        # 生成所有尺寸的favicon
npm run update-favicon          # 更新网站图标
```

### 🔗 内链与SEO命令
```bash
npm run manage-links analyze    # 分析内链状况
npm run manage-links report     # 生成内链报告
npm run manage-links check      # 检查特定文章内链
npm run manage-links suggest    # 推荐关键词内链
```

### 🔧 问题修复命令
```bash
npm run localize-images         # 本地化图片
npm run fix-missing-images      # 修复缺失图片
npm run clear-image-cache       # 清理图片缓存
npm run add-internal-links all  # 为所有文章添加内链
npm run convert-html            # HTML转MDX
```

## 🔧 故障排除

### 🚨 Reset-Site 相关问题

#### reset-site运行失败
```bash
# 1. 检查环境变量
# 确保 .env 文件包含 OPENAI_API_KEY

# 2. 清理并重试
npm run clear-cache
npm run reset-site

# 3. 检查OpenAI API配额
# 访问 https://platform.openai.com/account/usage

# 4. 如果某个步骤失败，可以单独运行
# 例如，如果文章生成失败：
npm run generate-articles
```

#### AI生成的内容质量不满意
```bash
# 1. 修改 config.txt 中的主题描述，使其更具体
# 2. 编辑 config.template.js 中的 ARTICLE_CONFIGS 手动调整文章标题
# 3. 重新运行相关步骤：
npm run update-theme-fixed        # 重新生成主题配置
npm run update-articles-full      # 重新生成文章配置
npm run generate-articles         # 重新生成文章内容
```

#### 某些步骤被跳过
reset-site.js 会在关键任务失败时停止执行（前3个步骤）。
如果非关键任务失败，脚本会继续执行并在最后报告失败任务。

### 📋 一般问题诊断

#### 文章相关问题
```bash
# 图片显示404
npm run fix-missing-images
npm run localize-images

# 手动删除图片后重新添加文章，图片不下载
npm run clear-image-cache
npm run add-articles-improved

# 新创建的文章没有内链
npm run add-internal-links all

# 内链不工作
npm run manage-links analyze
npm run build  # 重新构建

# 作者信息错误
node scripts/randomize-authors.js analyze
```

#### 构建和性能问题
```bash
# 构建失败
npm run clear-cache
rm -rf node_modules .astro
npm install
npm run build

# 内存不足（生成大量文章时）
# Windows:
set NODE_OPTIONS=--max-old-space-size=4096
npm run generate-articles

# Linux/Mac:
export NODE_OPTIONS="--max-old-space-size=4096"
npm run generate-articles
```

#### 配置同步问题
```bash
# 配置未生效
npm run sync-config
npm run dev  # 重启开发服务器

# 语法检查
node -c config.template.js
```

### 🛠️ 调试工具

```bash
# 详细日志模式
DEBUG=astro:* npm run dev

# 检查文件结构
ls -la src/content/articles/ | head -10

# 验证内链映射
cat internal-links-report.md

# 查看最近的备份
ls -lt backups/ | head -5
```

## 📁 项目结构

```
astrotemp/
├── 📂 src/
│   ├── 📂 content/
│   │   ├── 📂 articles/           # 📄 文章内容 (MDX)
│   │   ├── 📂 authors/            # 👤 作者信息
│   │   └── 📂 categories/         # 📑 分类配置
│   ├── 📂 assets/images/articles/ # 🖼️ 文章图片
│   ├── 📂 lib/
│   │   ├── 📂 rehype/            # 🔗 内链处理系统
│   │   └── 📂 utils/             # 🛠️ 工具函数
│   └── config.js                 # ⚙️ 网站配置（自动生成）
│
├── 📂 scripts/                   # 🤖 自动化脚本
│   ├── reset-site.js             # 🌟 一键网站重置
│   ├── reset-site.bat            # 🌟 Windows批处理版本
│   ├── generate-articles.js      # ✍️ AI文章生成
│   ├── update-theme-config-fixed.js      # 🎨 AI主题配置
│   ├── update-article-config-with-categories.js  # 📝 文章配置生成
│   ├── add-articles-improved.js  # ✨ 智能文章添加
│   ├── schedule-articles.js      # 📅 定时发布
│   ├── randomize-authors.js      # 👥 作者管理
│   ├── manage-internal-links.js  # 🔗 内链管理
│   ├── sync-config-template.js   # ⚙️ 配置同步
│   ├── generate-new-topics.js    # 🎯 新主题生成
│   ├── generate-ai-favicon.js    # 🤖 AI图标生成
│   ├── generate-favicon.js       # 🎨 图标文件生成
│   └── update-favicon.js         # 🔄 图标更新
│
├── 📂 config/                    # ⚙️ 配置文件
│   └── categorization-rules.json # 📑 分类规则
│
├── 📂 newarticle/               # 📥 新文章HTML存放
├── 📂 scheduledarticle/         # 📅 定时文章HTML存放
├── 📂 author/                   # 👤 作者配置
│   └── name.txt                 # 作者模式设置
├── 📂 backups/                  # 💾 自动备份
│
├── config.txt                   # 🎯 主配置（手动编辑）
├── config.template.js           # 📋 配置模板（AI自动更新）
├── .env                         # 🔐 环境变量（OpenAI密钥）
└── package.json                # 📦 项目配置
```

## 🏆 系统优势

### 🤖 完全自动化的AI驱动系统
- ✅ **一键生成完整网站**：编辑3行配置，运行1个命令
- ✅ **AI生成所有内容**：主题配置、文章、图标全自动
- ✅ **40篇高质量文章**：25篇立即发布 + 15篇定时发布
- ✅ **零手动干预**：从配置到部署，全程自动化

### 🎯 智能内容生成
- ✅ **主题感知**：AI理解你的主题并生成相关内容
- ✅ **多样性保证**：8个不同分类，内容分布均匀
- ✅ **14位专业作者**：智能分配，避免重复
- ✅ **SEO优化**：自动生成内链、元数据和sitemap

### 🔧 强大的管理功能
- ✅ **自动备份**：每次删除都创建备份
- ✅ **错误恢复**：关键任务失败自动停止
- ✅ **增量生成**：支持跳过已有文章继续生成
- ✅ **灵活配置**：13个独立步骤可单独运行

### 🚀 性能和质量
- ✅ **构建时处理**：内链在构建时生成，运行时高效
- ✅ **图片本地化**：所有图片自动下载到本地
- ✅ **响应式设计**：完美支持移动端
- ✅ **现代技术栈**：Astro + React + Tailwind CSS

## 💡 使用场景

### 🎯 最佳使用方式：完全AI生成

**适合人群：** 想快速创建内容网站的人

```bash
# 1. 编辑 config.txt（3行配置）
# 2. 运行一个命令
npm run reset-site

# 3. 等待15-30分钟
# 4. 网站完成！40篇文章，完整配置，准备部署
```

**优势：**
- 最快速度：15-30分钟完整网站
- 最省力：只需编辑3行配置
- 最一致：AI确保内容风格统一

### 📝 混合模式：手动+AI

**适合人群：** 有部分内容，需要AI补充

```bash
# 1. 手动准备一些HTML文章放到 newarticle/
# 2. 添加手动文章
npm run add-articles-improved

# 3. 生成AI文章补充
npm run update-articles-full
npm run generate-articles

# 4. 设置定时发布
npm run schedule-articles
```

### ✍️ 纯手动模式：传统方式

**适合人群：** 完全自己编写内容

```bash
# 1. 准备所有HTML文章
# 2. 手动编辑 config.template.js
# 3. 添加文章
npm run add-articles-improved
npm run sync-config
```

## 📚 快速参考

### 🚀 最快开始
1. 编辑 [config.txt](config.txt)（3行）
2. 运行 `npm run reset-site`
3. 等待完成（15-30分钟）

### 📖 了解更多
- **Reset-Site详解：** 见上文"Reset-Site工作流程详解"章节
- **手动操作：** 见"智能文章管理"章节
- **故障排除：** 见"故障排除"章节

### ⚡ 常用命令
- `npm run reset-site` - 完整重置和生成
- `npm run dev` - 开发服务器
- `npm run build` - 构建生产版本
- `npm run generate-articles` - AI生成文章
- `npm run add-articles-improved` - 添加手动文章

---

## 🎨 进阶：创建自定义主题分类

如果 reset-site 生成的分类不满足需求，可以创建自定义分类系统：

### 编辑分类规则
编辑 [config/categorization-rules.json](config/categorization-rules.json)，添加新主题：

```json
{
  "themes": {
    "your-theme": {
      "name": "你的主题",
      "categories": {
        "category-1": {
          "keywords": ["关键词1", "关键词2"]
        }
      }
    }
  }
}
```

### 切换主题
```bash
# 查看可用主题
npm run theme-list

# 切换到新主题
npm run theme-switch your-theme

# 重新分类文章
node scripts/categorize-articles.js
```

---

## 🌟 项目亮点

### 为什么选择 AstroTemp？

1. **最快的网站生成**：15-30分钟从零到完整网站
2. **最智能的AI**：理解主题，生成一致高质量内容
3. **最完整的功能**：从内容到图标，一应俱全
4. **最灵活的使用**：完全AI、混合模式、纯手动，随你选择
5. **最友好的错误处理**：自动备份，关键步骤保护

### 技术栈

- 🚀 **Astro** - 现代静态网站生成器
- ⚛️ **React** - 交互组件
- 🎨 **Tailwind CSS** - 实用优先的CSS框架
- 🤖 **OpenAI GPT-4** - AI内容生成
- 🖼️ **DALL-E** - AI图标生成
- 🔍 **Pagefind** - 快速搜索
- 📊 **Gray Matter** - Frontmatter解析

---

*AstroTemp - AI驱动的网站自动化生成系统*
*让创建内容网站变得前所未有的简单*

**最后更新：2025年10月**